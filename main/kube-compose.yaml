################################################################################
#      Copyright (C) 2020        Sebastian Francisco Colomar Bauza             #
#      SPDX-License-Identifier:  GPL-2.0-only                                  #
################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: hasher-cm
data:
  hasher.rb: |
    require 'digest'
    require 'sinatra'
    require 'socket'
    set :bind, '0.0.0.0'
    set :port, 8080
    post '/' do
        # Simulate a bit of delay
        sleep 0.1
        content_type 'text/plain'
        "#{Digest::SHA2.new().update(request.body.read)}"
    end
    get '/' do
        "HASHER running on #{Socket.gethostname}\n"
    end
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rng-cm
data:
  rng.py: |
    from flask import Flask, Response
    import os
    import socket
    import time
    app = Flask(__name__)
    # Enable debugging if the DEBUG environment variable is set and starts with Y
    app.debug = os.environ.get("DEBUG", "").lower().startswith('y')
    hostname = socket.gethostname()
    urandom = os.open("/dev/urandom", os.O_RDONLY)
    @app.route("/")
    def index():
        return "RNG running on {}\n".format(hostname)
    @app.route("/<int:how_many_bytes>")
    def rng(how_many_bytes):
        # Simulate a little bit of delay
        time.sleep(0.1)
        return Response(
            os.read(urandom, how_many_bytes),
            content_type="application/octet-stream")
    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=8080)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webui-cm
data:
  webui.js: |
    var express = require('express');
    var app = express();
    var redis = require('redis');
    var client = redis.createClient(6379, 'redis');
    client.on("error", function (err) {
        console.error("Redis error", err);
    });
    app.get('/', function (req, res) {
        res.redirect('/index.html');
    });
    app.get('/json', function (req, res) {
        client.hlen('wallet', function (err, coins) {
            client.get('hashes', function (err, hashes) {
                var now = Date.now() / 1000;
                res.json( {
                    coins: coins,
                    hashes: hashes,
                    now: now
                });
            });
        });
    });
    app.use(express.static('files'));
    var server = app.listen(8080, function () {
        console.log('WEBUI running on port 8080');
    });
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: worker-cm
data:
  worker.py: |
    import logging
    import os
    from redis import Redis
    import requests
    import time
    DEBUG = os.environ.get("DEBUG", "").lower().startswith("y")
    log = logging.getLogger(__name__)
    if DEBUG:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
        logging.getLogger("requests").setLevel(logging.WARNING)
    redis = Redis("redis")
    def get_random_bytes():
        r = requests.get("http://rng/32")
        return r.content
    def hash_bytes(data):
        r = requests.post("http://hasher/",
                          data=data,
                          headers={"Content-Type": "application/octet-stream"})
        hex_hash = r.text
        return hex_hash
    def work_loop(interval=1):
        deadline = 0
        loops_done = 0
        while True:
            if time.time() > deadline:
                log.info("{} units of work done, updating hash counter"
                         .format(loops_done))
                redis.incrby("hashes", loops_done)
                loops_done = 0
                deadline = time.time() + interval
            work_once()
            loops_done += 1
    def work_once():
        log.debug("Doing one unit of work")
        time.sleep(0.01)
        random_bytes = get_random_bytes()
        hex_hash = hash_bytes(random_bytes)
        if not hex_hash.startswith('0'):
            log.debug("No coin found")
            return
        log.info("Coin found: {}...".format(hex_hash[:8]))
        created = redis.hset("wallet", hex_hash, random_bytes)
        if not created:
            log.info("We already had that coin")
    if __name__ == "__main__":
        while True:
            try:
                work_loop()
            except:
                log.exception("In work loop:")
                log.error("Waiting 1s and restarting.")
                time.sleep(1)
---
apiVersion: v1
kind: Pod
metadata:
  name: hasher-po
  labels:
    app: hasher-po
spec:
  containers:
    - name: hasher-container
      args:
        - hasher.rb
      command:
        - ruby
      image: docker.io/academiaonline/dockercoins:latest-hasher
      securityContext:
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
        - name: hasher-volume
          mountPath: /src/hasher.rb
          readOnly: true
          subPath: hasher.rb
      workingDir: /src/
  volumes:
    - name: hasher-volume
      configMap:
        defaultMode: 0444
        items:
          - key: hasher.rb
            mode: 0444
            path: hasher.rb
        name: hasher-cm
---
apiVersion: v1
kind: Pod
metadata:
  name: redis-po
  labels:
    app: redis-po
spec:
  containers:
    - name: redis-container
      args:
        - redis-server
      command:
        - docker-entrypoint.sh
      image: docker.io/library/redis:alpine
      securityContext:
        runAsGroup: 0
        runAsUser: 65534
      volumeMounts:
        - name: redis-volume
          mountPath: /data/
          readOnly: false
      workingDir: /data/
  initContainers:
    - name: init-container
      args:
        - chmod g+w /data/
      command:
        - sh
        - -c
      image: docker.io/library/busybox:latest
      securityContext:
        runAsGroup: 0
        runAsUser: 65534
      volumeMounts:
        - name: redis-volume
          mountPath: /data/
          readOnly: false
      workingDir: /data/
  volumes:
    - name: redis-volume
      persistentVolumeClaim:
        claimName: redis-pvc
        readOnly: false
---
apiVersion: v1
kind: Pod
metadata:
  name: rng-po
  labels:
    app: rng-po
spec:
  containers:
    - name: rng-container
      args:
        - rng.py
      command:
        - python
      image: docker.io/academiaonline/dockercoins:latest-rng
      securityContext:
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
        - name: rng-volume
          mountPath: /src/rng.py
          readOnly: true
          subPath: rng.py
      workingDir: /src/
  volumes:
    - name: rng-volume
      configMap:
        defaultMode: 0444
        items:
          - key: rng.py
            mode: 0444
            path: rng.py
        name: rng-cm
---
apiVersion: v1
kind: Pod
metadata:
  name: webui-po
  labels:
    app: webui-po
spec:
  containers:
    - name: webui-container
      args:
        - webui.js
      command:
        - node
      image: docker.io/academiaonline/dockercoins:latest-webui
      securityContext:
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
        - name: webui-files
          mountPath: /src/files/
          readOnly: true
        - name: webui-volume
          mountPath: /src/webui.js
          readOnly: true
          subPath: webui.js
      workingDir: /src/
  initContainers:
    - name: webui-init-container
      args:
        - git clone --branch main --single-branch https://github.com/academiaonline/dockercoins ; cp -rv dockercoins/webui/files/* /src/files/
      command:
        - sh
        - -c
      image: bitnami/git:latest
      securityContext:
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
        - name: webui-files
          mountPath: /src/files/
          readOnly: false
      workingDir: /tmp/
  volumes:
    - name: webui-volume
      configMap:
        defaultMode: 0444
        items:
          - key: webui.js
            mode: 0444
            path: webui.js
        name: webui-cm
    - name: webui-files
      emptyDir:
        medium: Memory
        sizeLimit: 1Mi
---
apiVersion: v1
kind: Pod
metadata:
  name: worker-po
  labels:
    app: worker-po
spec:
  containers:
    - name: worker-container
      args:
        - worker.py
      command:
        - python
      image: docker.io/academiaonline/dockercoins:latest-worker
      securityContext:
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
        - name: worker-volume
          mountPath: /src/worker.py
          readOnly: true
          subPath: worker.py
      workingDir: /src/
  volumes:
    - name: worker-volume
      configMap:
        defaultMode: 0444
        items:
          - key: worker.py
            mode: 0444
            path: worker.py
        name: worker-cm
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
spec:
  podSelector: {}
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hasher-netpol
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: worker-po
      ports:
        - port: 8080
  podSelector:
    matchLabels:
      app: hasher-po
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-netpol
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: webui-po
        - podSelector:
            matchLabels:
              app: worker-po
      ports:
        - port: 6379
  podSelector:
    matchLabels:
      app: redis-po
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rng-netpol
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: worker-po
      ports:
        - port: 8080
  podSelector:
    matchLabels:
      app: rng-po
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: webui-netpol
spec:
  ingress:
    - ports:
        - port: 8080
  podSelector:
    matchLabels:
      app: webui-po
  policyTypes:
    - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: worker-po
spec:
  podSelector:
    matchLabels:
      app: worker-po
  policyTypes:
    - Ingress
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /tmp/redis/
    type: DirectoryOrCreate
  persistentVolumeReclaimPolicy: Delete
  storageClassName: redis-sc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: redis-sc
---
apiVersion: v1
kind: Service
metadata:
  name: hasher
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: hasher-po
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis-po
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: rng
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: rng-po
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: webui
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: webui-po
  type: NodePort
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis-sc
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
